(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var o=t(537),r=t.n(o),a=t(645),i=t.n(a)()(r());i.push([e.id,"h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourlyTime, #daysTime {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,WAAW;EACX,aAAa;EACb,kCAAkC;EAClC,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;EACT,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;EACnB,aAAa;AACf",sourcesContent:["h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourlyTime, #daysTime {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=o.base?d[0]+o.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var A=t(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var m=r(u,o);o.byIndex=c,n.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=o(e,r),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),i=t.n(a),c=t(565),d=t.n(c),s=t(216),l=t.n(s),p=t(589),A=t.n(p),u=t(426),m={};let f;m.styleTagTransform=A(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;const h=(()=>{class e{constructor(e){this.location=[e.location.name,e.location.region,e.location.country],this.weather=e.current.condition.text,this.icon=e.current.condition.icon,this.tempF=e.current.temp_f,this.tempC=e.current.temp_c,this.time=e.location.localtime,this.feelsLikeF=e.current.feelslike_f,this.feelsLikeC=e.current.feelslike_c,this.humid=e.current.humidity,this.wind=[e.current.wind_mph,e.current.wind_kph,e.current.wind_dir],this.dailyForecast=[];for(let n=1;n<e.forecast.forecastday.length;n++)this.dailyForecast.push({sunRise:e.forecast.forecastday[n].astro.sunrise,sunSet:e.forecast.forecastday[n].astro.sunset,moonPhase:e.forecast.forecastday[n].astro.moon_phase,tempC:e.forecast.forecastday[n].day.avgtemp_c,tempF:e.forecast.forecastday[n].day.avgtemp_f,date:e.forecast.forecastday[n].date,weatherType:e.forecast.forecastday[n].day.condition.icon});let n=parseInt(e.location.localtime.substr(11,2)),t=0;this.hourlyForecast=[];for(let o=0;o<8;o++)n>=24&&(n=0,t++),this.hourlyForecast.push({time:e.forecast.forecastday[t].hour[n].time,tempC:e.forecast.forecastday[t].hour[n].temp_c,tempF:e.forecast.forecastday[t].hour[n].temp_f,weatherType:e.forecast.forecastday[t].hour[n].condition.icon}),n++}}let n;return{retrieveWeather:async()=>{n=n?search.value:"New York",console.log(n);const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=e3b792acc4dc4d7593b232955232802&q=${n}&days=8&aqi=no&alerts=no\n    `,{mode:"cors"}),o=await t.json();console.log(o),(n=>{f=new e(n),console.log(f)})(o),console.log(f.weather)}}})();let C="F";window.onload=()=>{document.getElementById("town-search").addEventListener("submit",(()=>{g.pageUpdates("new")})),g.pageUpdates("new"),document.getElementById("temp-conversion").addEventListener("click",(()=>{g.convertTemp()}))};const g=(()=>{const e=()=>{let e=document.getElementById("time-cards");for(;e.firstChild;)e.removeChild(e.lastChild);for(let n=0;n<f.dailyForecast.length;n++){let t=document.createElement("div"),o=document.createElement("p"),r=document.createElement("h1");t.appendChild(o),t.appendChild(r),t.setAttribute("class","day-card"),o.appendChild(document.createTextNode(f.dailyForecast[n].date)),"F"===C?r.appendChild(document.createTextNode(`${f.dailyForecast[n].tempF} °F`)):r.appendChild(document.createTextNode(`${f.dailyForecast[n].tempC} °C`)),e.appendChild(t)}};return{pageUpdates:async n=>{"new"===n&&await h.retrieveWeather(),(()=>{let e=document.getElementById("weather"),n=document.getElementById("location"),t=document.getElementById("time"),o=document.getElementById("temp"),r=document.getElementById("weather-icon"),a=document.getElementById("feels-like"),i=document.getElementById("humidity"),c=document.getElementById("wind-speed");for(let e=0;e<f.location.length;e++)n.appendChild(document.createTextNode(`${f.location[e]}`)),n.appendChild(document.createElement("br"));e.appendChild(document.createTextNode(`${f.weather}`)),t.appendChild(document.createTextNode(`${f.time}`)),r.src=f.icon,i.appendChild(document.createTextNode(`${f.humid} %`)),c.appendChild(document.createTextNode(`${f.wind[2]} `)),"F"===C?(o.appendChild(document.createTextNode(`${f.tempF} °F`)),a.appendChild(document.createTextNode(`${f.feelsLikeF} °F`)),c.appendChild(document.createTextNode(`${f.wind[0]} mph`))):(o.appendChild(document.createTextNode(`${f.tempC} °C`)),a.appendChild(document.createTextNode(`${f.feelsLikeC} °C`)),c.appendChild(document.createTextNode(`${f.wind[1]} kph`)))})(),e()},convertTemp:()=>{let n=document.getElementById("temp-conversion"),t=document.getElementById("temp"),o=document.getElementById("feels-like"),r=document.getElementById("wind-speed");"F"===C?(n.textContent="Convert to F",C="C",t.textContent=`${f.tempC} °C`,o.textContent=`${f.feelsLikeC} °C`,r.textContent=`${f.wind[2]} ${f.wind[1]} kph`):(n.textContent="Convert to C",C="F",t.textContent=`${f.tempF} °F`,o.textContent=`${f.feelsLikeF} °F`,r.textContent=`${f.wind[2]} ${f.wind[0]} mph`),e()}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,