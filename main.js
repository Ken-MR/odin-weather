(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),a=t.n(r),o=t(645),i=t.n(o)()(a());i.push([e.id,"h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 200px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourlyTime, #daysTime {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,WAAW;EACX,aAAa;EACb,kCAAkC;EAClC,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;EACT,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;EACnB,aAAa;AACf",sourcesContent:["h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 200px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourlyTime, #daysTime {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],l=o[s]||0,p="".concat(s," ").concat(l);o[s]=l+1;var A=t(p),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)n[A].references++,n[A].updater(u);else{var f=a(u,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=t(o[i]);n[c].references--}for(var d=r(e,a),s=0;s<o.length;s++){var l=t(o[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),c=t(565),d=t.n(c),s=t(216),l=t.n(s),p=t(589),A=t.n(p),u=t(426),f={};let m;f.styleTagTransform=A(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=l(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const h=(()=>{class e{constructor(e){this.location=[e.location.name,e.location.region,e.location.country],this.weather=e.current.condition.text,this.icon=e.current.condition.icon,this.tempF=e.current.temp_f,this.tempC=e.current.temp_c,this.time=e.location.localtime,this.feelsLikeF=e.current.feelslike_f,this.feelsLikeC=e.current.feelslike_c,this.humid=e.current.humidity,this.wind=[e.current.wind_mph,e.current.wind_kph,e.current.wind_dir],this.dailyForecast=[];for(let n=1;n<e.forecast.forecastday.length;n++)this.dailyForecast.push({sunRise:e.forecast.forecastday[n].astro.sunrise,sunSet:e.forecast.forecastday[n].astro.sunset,moonPhase:e.forecast.forecastday[n].astro.moon_phase,tempC:e.forecast.forecastday[n].day.avgtemp_c,tempF:e.forecast.forecastday[n].day.avgtemp_f,date:e.forecast.forecastday[n].date,weatherType:e.forecast.forecastday[n].day.condition.icon});let n=parseInt(e.location.localtime.substr(11,2)),t=0;this.hourlyForecast=[];for(let r=0;r<8;r++)n>=24&&(n=0,t++),this.hourlyForecast.push({time:e.forecast.forecastday[t].hour[n].time,temp_c:e.forecast.forecastday[t].hour[n].temp_c,temp_f:e.forecast.forecastday[t].hour[n].temp_f,weatherType:e.forecast.forecastday[t].hour[n].condition.icon}),n++}}let n;return{retrieveWeather:async()=>{n=n?search.value:"New York",console.log(n);const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=e3b792acc4dc4d7593b232955232802&q=${n}&days=8&aqi=no&alerts=no\n    `,{mode:"cors"}),r=await t.json();console.log(r),(n=>{m=new e(n),console.log(m)})(r),console.log(m.weather)}}})();window.onload=()=>{document.getElementById("town-search").addEventListener("submit",(()=>{g.pageUpdates("new")})),g.pageUpdates("new")};const g={pageUpdates:async e=>{"new"===e&&await h.retrieveWeather(),(()=>{let e=document.getElementById("weather"),n=document.getElementById("location"),t=document.getElementById("time"),r=document.getElementById("temp"),a=document.getElementById("weather-icon"),o=document.getElementById("feels-like"),i=document.getElementById("humidity"),c=document.getElementById("wind-speed");for(let e=0;e<m.location.length;e++)n.appendChild(document.createTextNode(`${m.location[e]}`)),n.appendChild(document.createElement("br"));e.appendChild(document.createTextNode(`${m.weather}`)),t.appendChild(document.createTextNode(`${m.time}`)),a.src=m.icon,i.appendChild(document.createTextNode(`${m.humid} %`)),c.appendChild(document.createTextNode(`${m.wind[2]} `)),r.appendChild(document.createTextNode(`${m.tempF} °F`)),o.appendChild(document.createTextNode(`${m.feelsLikeF} °F`)),c.appendChild(document.createTextNode(`${m.wind[0]} mph`))})(),(()=>{let e=document.getElementById("time-cards");for(;e.firstChild;)e.removeChild(e.lastChild);for(let n=0;n<m.dailyForecast.length;n++){let t=document.createElement("div"),r=document.createElement("p"),a=document.createElement("h1");t.appendChild(r),t.appendChild(a),t.setAttribute("class","day-card"),r.appendChild(document.createTextNode(m.dailyForecast[n].date)),a.appendChild(document.createTextNode(`${m.dailyForecast[n].tempF} °F`)),e.appendChild(t)}})()}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,