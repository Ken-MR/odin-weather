(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>i});var o=t(537),r=t.n(o),a=t(645),d=t.n(a)()(r());d.push([e.id,"h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourly-time, #days-time {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,WAAW;EACX,aAAa;EACb,kCAAkC;EAClC,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;EACT,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;EACnB,aAAa;AACf",sourcesContent:["h1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 20px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourly-time, #days-time {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}"],sourceRoot:""}]);const i=d},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var d={};if(o)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(d[c]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&d[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},d=[],i=0;i<e.length;i++){var c=e[i],s=o.base?c[0]+o.base:c[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var u=t(p),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var m=r(A,o);o.byIndex=i,n.splice(i,0,{identifier:p,updater:m,references:1})}d.push(p)}return d}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var d=0;d<a.length;d++){var i=t(a[d]);n[i].references--}for(var c=o(e,r),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},569:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(o){var r=n[o];if(void 0!==r)return r.exports;var a=n[o]={id:o,exports:{}};return e[o](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),o=t(795),r=t.n(o),a=t(569),d=t.n(a),i=t(565),c=t.n(i),s=t(216),l=t.n(s),p=t(589),u=t.n(p),A=t(426),m={};let h;m.styleTagTransform=u(),m.setAttributes=c(),m.insert=d().bind(null,"head"),m.domAPI=r(),m.insertStyleElement=l(),n()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const f=(()=>{class e{constructor(e){this.location=[e.location.name,e.location.region,e.location.country],this.weather=e.current.condition.text,this.icon=e.current.condition.icon,this.tempF=e.current.temp_f,this.tempC=e.current.temp_c,this.time=e.location.localtime,this.feelsLikeF=e.current.feelslike_f,this.feelsLikeC=e.current.feelslike_c,this.humid=e.current.humidity,this.wind=[e.current.wind_mph,e.current.wind_kph,e.current.wind_dir],this.dailyForecast=[];for(let n=1;n<e.forecast.forecastday.length;n++)this.dailyForecast.push({sunRise:e.forecast.forecastday[n].astro.sunrise,sunSet:e.forecast.forecastday[n].astro.sunset,moonPhase:e.forecast.forecastday[n].astro.moon_phase,tempC:e.forecast.forecastday[n].day.avgtemp_c,tempF:e.forecast.forecastday[n].day.avgtemp_f,date:e.forecast.forecastday[n].date,weatherType:e.forecast.forecastday[n].day.condition.icon});let n=parseInt(e.location.localtime.substr(11,2)),t=0;this.hourlyForecast=[];for(let o=0;o<8;o++)n>=24&&(n=0,t++),this.hourlyForecast.push({time:e.forecast.forecastday[t].hour[n].time,tempC:e.forecast.forecastday[t].hour[n].temp_c,tempF:e.forecast.forecastday[t].hour[n].temp_f,weatherType:e.forecast.forecastday[t].hour[n].condition.icon}),n++}}let n;return{retrieveWeather:async()=>{n=n?search.value:"New York",console.log(n);const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=e3b792acc4dc4d7593b232955232802&q=${n}&days=8&aqi=no&alerts=no\n    `,{mode:"cors"}),o=await t.json();console.log(o),(n=>{h=new e(n),console.log(h)})(o),console.log(h.weather)}}})();let C="daily",y="F";window.onload=()=>{document.getElementById("town-search").addEventListener("submit",(()=>{g.pageUpdates("new")})),g.pageUpdates("new"),document.getElementById("temp-conversion").addEventListener("click",(()=>{g.convertTemp()})),document.getElementById("hourly-time").addEventListener("click",(()=>{g.displayTime()})),document.getElementById("days-time").addEventListener("click",(()=>{g.displayTime()})),document.getElementById("days-time").disabled=!0};const g=(()=>{const e=()=>{let e=document.getElementById("time-cards");for(;e.firstChild;)e.removeChild(e.lastChild);if("daily"===C)for(let n=0;n<h.dailyForecast.length;n++){let t=document.createElement("div"),o=document.createElement("p"),r=document.createElement("h1");t.appendChild(o),t.appendChild(r),t.setAttribute("class","day-card"),o.appendChild(document.createTextNode(h.dailyForecast[n].date)),"F"===y?r.appendChild(document.createTextNode(`${h.dailyForecast[n].tempF} °F`)):r.appendChild(document.createTextNode(`${h.dailyForecast[n].tempC} °C`)),e.appendChild(t)}else for(let n=0;n<h.hourlyForecast.length;n++){let t=document.createElement("div"),o=document.createElement("p"),r=document.createElement("h1");t.appendChild(o),t.appendChild(r),t.setAttribute("class","hour-card"),o.appendChild(document.createTextNode(h.hourlyForecast[n].time)),"F"===y?r.appendChild(document.createTextNode(`${h.hourlyForecast[n].tempF} °F`)):r.appendChild(document.createTextNode(`${h.hourlyForecast[n].tempC} °C`)),e.appendChild(t)}};return{pageUpdates:async n=>{"new"===n&&await f.retrieveWeather(),(()=>{let e=document.getElementById("weather"),n=document.getElementById("location"),t=document.getElementById("time"),o=document.getElementById("temp"),r=document.getElementById("weather-icon"),a=document.getElementById("feels-like"),d=document.getElementById("humidity"),i=document.getElementById("wind-speed");for(let e=0;e<h.location.length;e++)n.appendChild(document.createTextNode(`${h.location[e]}`)),n.appendChild(document.createElement("br"));e.appendChild(document.createTextNode(`${h.weather}`)),t.appendChild(document.createTextNode(`${h.time}`)),r.src=h.icon,d.appendChild(document.createTextNode(`${h.humid} %`)),i.appendChild(document.createTextNode(`${h.wind[2]} `)),"F"===y?(o.appendChild(document.createTextNode(`${h.tempF} °F`)),a.appendChild(document.createTextNode(`${h.feelsLikeF} °F`)),i.appendChild(document.createTextNode(`${h.wind[0]} mph`))):(o.appendChild(document.createTextNode(`${h.tempC} °C`)),a.appendChild(document.createTextNode(`${h.feelsLikeC} °C`)),i.appendChild(document.createTextNode(`${h.wind[1]} kph`)))})(),e()},convertTemp:()=>{let n=document.getElementById("temp-conversion"),t=document.getElementById("temp"),o=document.getElementById("feels-like"),r=document.getElementById("wind-speed");"F"===y?(n.textContent="Convert to F",y="C",t.textContent=`${h.tempC} °C`,o.textContent=`${h.feelsLikeC} °C`,r.textContent=`${h.wind[2]} ${h.wind[1]} kph`):(n.textContent="Convert to C",y="F",t.textContent=`${h.tempF} °F`,o.textContent=`${h.feelsLikeF} °F`,r.textContent=`${h.wind[2]} ${h.wind[0]} mph`),e()},displayTime:()=>{let n=document.getElementById("hourly-time"),t=document.getElementById("days-time");"daily"===C?(C="hourly",n.disabled=!0,t.disabled=!1):(C="daily",n.disabled=!1,t.disabled=!0),e()}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,