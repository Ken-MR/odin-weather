(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>p});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),c=t(667),d=t.n(c),s=new URL(t(971),t.b),l=i()(a()),u=d()(s);l.push([e.id,"body { \n  background: url("+u+") no-repeat center center fixed; \n  background-size: cover;\n  border: none;\n}\n\nh1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n#search {\n  background-color: transparent;\n  border: 0px;\n  outline: none;\n  border-bottom: 3px solid gray;\n  box-shadow: none;\n  color:transparent;\n  cursor:default;\n  color: black;\n}\n\n#search:focus {\n  background-color: rgba(252, 252, 252, 0.1);\n}\n\n.material-icons {\n  position: relative;\n  top: 10px;\n}\n\n#submit {\n  background: transparent;\n  border: 0;\n}\n\n.material-icons {\n  cursor: pointer;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 40px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourly-time, #days-time {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,iFAAyE;EACzE,sBAAsB;EACtB,YAAY;AACd;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,WAAW;EACX,aAAa;EACb,kCAAkC;EAClC,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,6BAA6B;EAC7B,WAAW;EACX,aAAa;EACb,6BAA6B;EAC7B,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,YAAY;AACd;;AAEA;EACE,0CAA0C;AAC5C;;AAEA;EACE,kBAAkB;EAClB,SAAS;AACX;;AAEA;EACE,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,mBAAmB;EACnB,eAAe;EACf,aAAa;EACb,SAAS;EACT,sBAAsB;EACtB,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,SAAS;EACT,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,kBAAkB;AACpB;;AAEA;EACE,gBAAgB;EAChB,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,6BAA6B;AAC/B;;AAEA;EACE,6BAA6B;EAC7B,4BAA4B;EAC5B,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,6BAA6B;EAC7B,mBAAmB;EACnB,aAAa;AACf",sourcesContent:["body { \n  background: url('./weather-background.jpg') no-repeat center center fixed; \n  background-size: cover;\n  border: none;\n}\n\nh1, h2, p {\n  padding: 0px;\n  margin: 0px;\n}\n\n#weather-page {\n  padding: 50px;\n  height: 90vh;\n  width: 90vw;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 5fr 1fr;\n}\n\n.main {\n  grid-column: 1 / 2;\n  grid-row: 1 / 2;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n#weather-icon {\n  width: 100px;\n}\n\n#temp-conversion {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n#search {\n  background-color: transparent;\n  border: 0px;\n  outline: none;\n  border-bottom: 3px solid gray;\n  box-shadow: none;\n  color:transparent;\n  cursor:default;\n  color: black;\n}\n\n#search:focus {\n  background-color: rgba(252, 252, 252, 0.1);\n}\n\n.material-icons {\n  position: relative;\n  top: 10px;\n}\n\n#submit {\n  background: transparent;\n  border: 0;\n}\n\n.material-icons {\n  cursor: pointer;\n}\n\n.sub {\n  grid-column: 3 / -1;\n  grid-row: 1 / 2;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n  align-items: flex-end;\n}\n\n.weather-card {\n  display: flex;\n  justify-content: space-between;\n  gap: 10px;\n  height: 50px;\n  width: 250px;\n}\n\n.weather-data {\n  display: flex;\n  flex-direction: column;\n  align-items: right;\n}\n\n#forecast {\n  grid-row: 2 / -1;\n  grid-column: 1 / -1;\n}\n\n#time-cards {\n  padding: 40px;\n  display: flex;\n  justify-content: space-around;\n}\n\n#hourly-time, #days-time {\n  background-color: transparent;\n  background-repeat: no-repeat;\n  border: none;\n  cursor: pointer;\n  overflow: hidden;\n  outline: none;\n}\n\n.day-card, .hour-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  height: 100px;\n}"],sourceRoot:""}]);const p=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),n.push(l))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[n].concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],l=o[s]||0,u="".concat(s," ").concat(l);o[s]=l+1;var p=t(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(A);else{var m=a(A,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=t(o[i]);n[c].references--}for(var d=r(e,a),s=0;s<o.length;s++){var l=t(o[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},971:(e,n,t)=>{e.exports=t.p+"1e2bad270fd2b572a044.jpg"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),c=t(565),d=t.n(c),s=t(216),l=t.n(s),u=t(589),p=t.n(u),A=t(426),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=l(),n()(A.Z,m),A.Z&&A.Z.locals&&A.Z.locals;const f=t.p+"2f75aaeb1c4d5dda5e6e.png",h=t.p+"b98d895e6748d0464bb3.png",g=t.p+"cc10d7cca7e721b44098.png";let y;const C=(()=>{class e{constructor(e){this.location=[e.location.name,e.location.region,e.location.country],this.weather=e.current.condition.text,this.icon=e.current.condition.icon,this.tempF=e.current.temp_f,this.tempC=e.current.temp_c,this.time=e.location.localtime,this.feelsLikeF=e.current.feelslike_f,this.feelsLikeC=e.current.feelslike_c,this.humid=e.current.humidity,this.wind=[e.current.wind_mph,e.current.wind_kph,e.current.wind_dir],this.dailyForecast=[];for(let n=1;n<e.forecast.forecastday.length;n++)this.dailyForecast.push({sunRise:e.forecast.forecastday[n].astro.sunrise,sunSet:e.forecast.forecastday[n].astro.sunset,moonPhase:e.forecast.forecastday[n].astro.moon_phase,tempC:e.forecast.forecastday[n].day.avgtemp_c,tempF:e.forecast.forecastday[n].day.avgtemp_f,date:e.forecast.forecastday[n].date,weatherType:e.forecast.forecastday[n].day.condition.icon});let n=parseInt(e.location.localtime.substr(11,2)),t=0;this.hourlyForecast=[];for(let r=0;r<8;r++)n>=24&&(n=0,t++),this.hourlyForecast.push({time:e.forecast.forecastday[t].hour[n].time,tempC:e.forecast.forecastday[t].hour[n].temp_c,tempF:e.forecast.forecastday[t].hour[n].temp_f,weatherType:e.forecast.forecastday[t].hour[n].condition.icon}),n++}}let n;return{retrieveWeather:async()=>{n=n?search.value:"New York";const t=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=e3b792acc4dc4d7593b232955232802&q=${n}&days=8&aqi=no&alerts=no\n    `,{mode:"cors"}),r=await t.json();console.log(r),(n=>{y=new e(n),console.log(y)})(r)}}})();function E(e,n){if(n.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+n.length+" present")}function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function v(e){E(1,arguments);var n=Object.prototype.toString.call(e);return e instanceof Date||"object"===b(e)&&"[object Date]"===n?new Date(e.getTime()):"number"==typeof e||"[object Number]"===n?new Date(e):("string"!=typeof e&&"[object String]"!==n||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(e){return E(1,arguments),v(e).getDay()}Math.pow(10,8);var B=6e4,x=36e5;function N(e,n){var t;E(1,arguments);var r=function(e){if(null===e||!0===e||!1===e)return NaN;var n=Number(e);return isNaN(n)?n:n<0?Math.ceil(n):Math.floor(n)}(null!==(t=null==n?void 0:n.additionalDigits)&&void 0!==t?t:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=function(e){var n,t={},r=e.split(T.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?n=r[0]:(t.date=r[0],n=r[1],T.timeZoneDelimiter.test(t.date)&&(t.date=e.split(T.timeZoneDelimiter)[0],n=e.substr(t.date.length,e.length))),n){var a=T.timezone.exec(n);a?(t.time=n.replace(a[1],""),t.timezone=a[1]):t.time=n}return t}(e);if(o.date){var i=function(e,n){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+n)+"})|(\\d{2}|[+-]\\d{"+(2+n)+"})$)"),r=e.match(t);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}(o.date,r);a=function(e,n){if(null===n)return new Date(NaN);var t=e.match(k);if(!t)return new Date(NaN);var r=!!t[4],a=I(t[1]),o=I(t[2])-1,i=I(t[3]),c=I(t[4]),d=I(t[5])-1;if(r)return function(e,n,t){return n>=1&&n<=53&&t>=0&&t<=6}(0,c,d)?function(e,n,t){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(n-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(n,c,d):new Date(NaN);var s=new Date(0);return function(e,n,t){return n>=0&&n<=11&&t>=1&&t<=($[n]||(j(e)?29:28))}(n,o,i)&&function(e,n){return n>=1&&n<=(j(e)?366:365)}(n,a)?(s.setUTCFullYear(n,o,Math.max(a,i)),s):new Date(NaN)}(i.restDateString,i.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var c,d=a.getTime(),s=0;if(o.time&&(s=function(e){var n=e.match(F);if(!n)return NaN;var t=D(n[1]),r=D(n[2]),a=D(n[3]);return function(e,n,t){return 24===e?0===n&&0===t:t>=0&&t<60&&n>=0&&n<60&&e>=0&&e<25}(t,r,a)?t*x+r*B+1e3*a:NaN}(o.time),isNaN(s)))return new Date(NaN);if(!o.timezone){var l=new Date(d+s),u=new Date(0);return u.setFullYear(l.getUTCFullYear(),l.getUTCMonth(),l.getUTCDate()),u.setHours(l.getUTCHours(),l.getUTCMinutes(),l.getUTCSeconds(),l.getUTCMilliseconds()),u}return c=function(e){if("Z"===e)return 0;var n=e.match(S);if(!n)return 0;var t="+"===n[1]?-1:1,r=parseInt(n[2]),a=n[3]&&parseInt(n[3])||0;return function(e,n){return n>=0&&n<=59}(0,a)?t*(r*x+a*B):NaN}(o.timezone),isNaN(c)?new Date(NaN):new Date(d+s+c)}var T={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},k=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,F=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,S=/^([+-])(\d{2})(?::?(\d{2}))?$/;function I(e){return e?parseInt(e):1}function D(e){return e&&parseFloat(e.replace(",","."))||0}var $=[31,null,31,30,31,30,31,31,30,31,30,31];function j(e){return e%400==0||e%4==0&&e%100!=0}function Y(e){return E(1,arguments),v(e).getHours()}let M="daily",U="F";window.onload=()=>{document.getElementById("town-search").addEventListener("submit",(()=>{Z.pageUpdates("new")})),Z.pageUpdates("new"),document.getElementById("temp-conversion").addEventListener("click",(()=>{Z.convertTemp()})),document.getElementById("hourly-time").addEventListener("click",(()=>{Z.displayTime()})),document.getElementById("days-time").addEventListener("click",(()=>{Z.displayTime()})),document.getElementById("days-time").disabled=!0};const Z=(()=>{const e=e=>{for(;e.firstChild;)e.removeChild(e.lastChild)},n=()=>{let n=document.getElementById("time-cards");if(e(n),"daily"===M)for(let e=0;e<y.dailyForecast.length;e++){let r=document.createElement("div"),a=document.createElement("p"),o=document.createElement("h1"),i=document.createElement("img");r.appendChild(a),r.appendChild(o),r.appendChild(i),r.setAttribute("class","day-card");let c=t(w(N(y.dailyForecast[e].date)));a.appendChild(document.createTextNode(c)),"F"===U?o.appendChild(document.createTextNode(`${y.dailyForecast[e].tempF} °F`)):o.appendChild(document.createTextNode(`${y.dailyForecast[e].tempC} °C`)),i.src=y.dailyForecast[e].weatherType,n.appendChild(r)}else for(let e=0;e<y.hourlyForecast.length;e++){let t=document.createElement("div"),a=document.createElement("p"),o=document.createElement("h1"),i=document.createElement("img");t.appendChild(a),t.appendChild(o),t.appendChild(i),t.setAttribute("class","hour-card");let c=r(Y(N(y.hourlyForecast[e].time)));a.appendChild(document.createTextNode(c)),"F"===U?o.appendChild(document.createTextNode(`${y.hourlyForecast[e].tempF} °F`)):o.appendChild(document.createTextNode(`${y.hourlyForecast[e].tempC} °C`)),i.src=y.hourlyForecast[e].weatherType,n.appendChild(t)}},t=e=>{switch(e){case 0:return"Sunday";case 1:return"Monday";case 2:return"Tuesday";case 3:return"Wednesday";case 4:return"Thursday";case 5:return"Friday";case 6:return"Saturday"}},r=e=>0===e?"12 AM":12===e?"12 PM":e>12?e-12+" PM":`${e} AM`;return{pageUpdates:async t=>{"new"===t&&await C.retrieveWeather(),(()=>{let n=document.getElementById("weather"),t=document.getElementById("location"),r=document.getElementById("time"),a=document.getElementById("temp"),o=document.getElementById("weather-icon"),i=document.getElementById("feels-like"),c=document.getElementById("humidity"),d=document.getElementById("wind-speed");e(n),e(t),e(r),e(a),e(i),e(c),e(d);let s=document.querySelectorAll(".icon");s[0].src=f,s[1].src=h,s[2].src=g;for(let e=0;e<y.location.length;e++)t.appendChild(document.createTextNode(`${y.location[e]}`)),t.appendChild(document.createElement("br"));n.appendChild(document.createTextNode(`${y.weather}`)),r.appendChild(document.createTextNode(`Retrieved: ${y.time}`)),o.src=y.icon,c.appendChild(document.createTextNode(`${y.humid} %`)),d.appendChild(document.createTextNode(`${y.wind[2]} `)),"F"===U?(a.appendChild(document.createTextNode(`${y.tempF} °F`)),i.appendChild(document.createTextNode(`${y.feelsLikeF} °F`)),d.appendChild(document.createTextNode(`${y.wind[0]} mph`))):(a.appendChild(document.createTextNode(`${y.tempC} °C`)),i.appendChild(document.createTextNode(`${y.feelsLikeC} °C`)),d.appendChild(document.createTextNode(`${y.wind[1]} kph`)))})(),n()},convertTemp:()=>{let e=document.getElementById("temp-conversion"),t=document.getElementById("temp"),r=document.getElementById("feels-like"),a=document.getElementById("wind-speed");"F"===U?(e.textContent="Convert to F",U="C",t.textContent=`${y.tempC} °C`,r.textContent=`${y.feelsLikeC} °C`,a.textContent=`${y.wind[2]} ${y.wind[1]} kph`):(e.textContent="Convert to C",U="F",t.textContent=`${y.tempF} °F`,r.textContent=`${y.feelsLikeF} °F`,a.textContent=`${y.wind[2]} ${y.wind[0]} mph`),n()},displayTime:()=>{let e=document.getElementById("hourly-time"),t=document.getElementById("days-time");"daily"===M?(M="hourly",e.disabled=!0,t.disabled=!1):(M="daily",e.disabled=!1,t.disabled=!0),n()}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,